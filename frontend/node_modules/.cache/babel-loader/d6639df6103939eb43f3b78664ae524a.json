{"ast":null,"code":"const fs = require('fs');\n\nconst path = require('path');\n\nconst Promise = require('promise');\n\nconst debug = require('debug')('winston:elasticsearch');\n\nconst retry = require('retry');\n\nconst BulkWriter = function BulkWriter(client, options) {\n  this.client = client;\n  this.options = options;\n  this.interval = options.interval || 5000;\n  this.waitForActiveShards = options.waitForActiveShards;\n  this.pipeline = options.pipeline;\n  this.bulk = []; // bulk to be flushed\n\n  this.running = false;\n  this.timer = false;\n  debug('created', this);\n};\n\nBulkWriter.prototype.start = function start() {\n  this.checkEsConnection();\n  this.running = true;\n  this.tick();\n  debug('started');\n};\n\nBulkWriter.prototype.stop = function stop() {\n  this.running = false;\n\n  if (!this.timer) {\n    return;\n  }\n\n  clearTimeout(this.timer);\n  this.timer = null;\n  debug('stopped');\n};\n\nBulkWriter.prototype.schedule = function schedule() {\n  const thiz = this;\n  this.timer = setTimeout(() => {\n    thiz.tick();\n  }, this.interval);\n};\n\nBulkWriter.prototype.tick = function tick() {\n  debug('tick');\n  const thiz = this;\n\n  if (!this.running) {\n    return;\n  }\n\n  this.flush().then(() => {// Emulate finally with last .then()\n  }).then(() => {\n    // finally()\n    thiz.schedule();\n  });\n};\n\nBulkWriter.prototype.flush = function flush() {\n  // write bulk to elasticsearch\n  const thiz = this;\n\n  if (this.bulk.length === 0) {\n    debug('nothing to flush');\n    return new Promise(resolve => {\n      return resolve();\n    });\n  }\n\n  const bulk = this.bulk.concat();\n  this.bulk = [];\n  debug('going to write', bulk);\n  return this.client.bulk({\n    body: bulk,\n    waitForActiveShards: this.waitForActiveShards,\n    timeout: this.interval + 'ms',\n    type: this.type\n  }).then(res => {\n    if (res.errors && res.items) {\n      res.items.forEach(item => {\n        if (item.index && item.index.error) {\n          // eslint-disable-next-line no-console\n          console.error('Elasticsearch index error', item.index.error);\n        }\n      });\n    }\n  }).catch(e => {\n    // prevent [DEP0018] DeprecationWarning\n    // rollback this.bulk array\n    thiz.bulk = bulk.concat(thiz.bulk); // eslint-disable-next-line no-console\n\n    console.error(e);\n    debug('error occrrued', e);\n    this.stop();\n    this.checkEsConnection();\n  });\n};\n\nBulkWriter.prototype.append = function append(index, type, doc) {\n  this.bulk.push({\n    index: {\n      _index: index,\n      _type: type,\n      pipeline: this.pipeline\n    }\n  });\n  this.bulk.push(doc);\n};\n\nBulkWriter.prototype.checkEsConnection = function checkEsConnection() {\n  const thiz = this;\n  thiz.esConnection = false;\n  const operation = retry.operation({\n    forever: true,\n    retries: 1,\n    factor: 1,\n    minTimeout: 1 * 1000,\n    maxTimeout: 60 * 1000,\n    randomize: false\n  });\n  return new Promise((fulfill, reject) => {\n    operation.attempt(currentAttempt => {\n      debug('checking for connection');\n      thiz.client.ping().then(res => {\n        thiz.esConnection = true; // Ensure mapping template is existing if desired\n\n        if (thiz.options.ensureMappingTemplate) {\n          thiz.ensureMappingTemplate(fulfill, reject);\n        } else {\n          fulfill(true);\n        }\n\n        debug('starting bulk writer');\n        thiz.running = true;\n        thiz.tick();\n      }, err => {\n        debug('checking for connection');\n\n        if (operation.retry(err)) {\n          return;\n        } // thiz.esConnection = false;\n\n\n        reject(new Error('Cannot connect to ES'));\n      });\n    });\n  });\n};\n\nBulkWriter.prototype.ensureMappingTemplate = function ensureMappingTemplate(fulfill, reject) {\n  const thiz = this; // eslint-disable-next-line prefer-destructuring\n\n  let mappingTemplate = thiz.options.mappingTemplate;\n\n  if (mappingTemplate === null || typeof mappingTemplate === 'undefined') {\n    const rawdata = fs.readFileSync(path.join(__dirname, 'index-template-mapping.json'));\n    mappingTemplate = JSON.parse(rawdata);\n  }\n\n  const tmplCheckMessage = {\n    name: 'template_' + thiz.options.indexPrefix\n  };\n  thiz.client.indices.getTemplate(tmplCheckMessage).then(res => {\n    fulfill(res);\n  }, res => {\n    if (res.status && res.status === 404) {\n      const tmplMessage = {\n        name: 'template_' + thiz.options.indexPrefix,\n        create: true,\n        body: mappingTemplate\n      };\n      console.log('CREATE TEMPLATE------------------');\n      thiz.client.indices.putTemplate(tmplMessage).then(res1 => {\n        fulfill(res1);\n      }, err1 => {\n        reject(err1);\n      });\n    }\n  });\n};\n\nmodule.exports = BulkWriter;","map":{"version":3,"sources":["/Users/steinkorsveien/Development/SpringBotTest/RestTutorial/frontend/node_modules/winston-elasticsearch/bulk_writer.js"],"names":["fs","require","path","Promise","debug","retry","BulkWriter","client","options","interval","waitForActiveShards","pipeline","bulk","running","timer","prototype","start","checkEsConnection","tick","stop","clearTimeout","schedule","thiz","setTimeout","flush","then","length","resolve","concat","body","timeout","type","res","errors","items","forEach","item","index","error","console","catch","e","append","doc","push","_index","_type","esConnection","operation","forever","retries","factor","minTimeout","maxTimeout","randomize","fulfill","reject","attempt","currentAttempt","ping","ensureMappingTemplate","err","Error","mappingTemplate","rawdata","readFileSync","join","__dirname","JSON","parse","tmplCheckMessage","name","indexPrefix","indices","getTemplate","status","tmplMessage","create","log","putTemplate","res1","err1","module","exports"],"mappings":"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","sourcesContent":["const fs = require('fs');\nconst path = require('path');\nconst Promise = require('promise');\nconst debug = require('debug')('winston:elasticsearch');\nconst retry = require('retry');\n\nconst BulkWriter = function BulkWriter(client, options) {\n  this.client = client;\n  this.options = options;\n  this.interval = options.interval || 5000;\n  this.waitForActiveShards = options.waitForActiveShards;\n  this.pipeline = options.pipeline;\n\n  this.bulk = []; // bulk to be flushed\n  this.running = false;\n  this.timer = false;\n  debug('created', this);\n};\n\nBulkWriter.prototype.start = function start() {\n  this.checkEsConnection();\n  this.running = true;\n  this.tick();\n  debug('started');\n};\n\nBulkWriter.prototype.stop = function stop() {\n  this.running = false;\n  if (!this.timer) { return; }\n  clearTimeout(this.timer);\n  this.timer = null;\n  debug('stopped');\n};\n\nBulkWriter.prototype.schedule = function schedule() {\n  const thiz = this;\n  this.timer = setTimeout(() => {\n    thiz.tick();\n  }, this.interval);\n};\n\nBulkWriter.prototype.tick = function tick() {\n  debug('tick');\n  const thiz = this;\n  if (!this.running) { return; }\n  this.flush()\n    .then(() => {\n      // Emulate finally with last .then()\n    })\n    .then(() => { // finally()\n      thiz.schedule();\n    });\n};\n\nBulkWriter.prototype.flush = function flush() {\n  // write bulk to elasticsearch\n  const thiz = this;\n  if (this.bulk.length === 0) {\n    debug('nothing to flush');\n    return new Promise((resolve) => {\n      return resolve();\n    });\n  }\n  const bulk = this.bulk.concat();\n  this.bulk = [];\n  debug('going to write', bulk);\n  return this.client.bulk({\n    body: bulk,\n    waitForActiveShards: this.waitForActiveShards,\n    timeout: this.interval + 'ms',\n    type: this.type\n  }).then((res) => {\n    if (res.errors && res.items) {\n      res.items.forEach((item) => {\n        if (item.index && item.index.error) {\n          // eslint-disable-next-line no-console\n          console.error('Elasticsearch index error', item.index.error);\n        }\n      });\n    }\n  }).catch((e) => { // prevent [DEP0018] DeprecationWarning\n    // rollback this.bulk array\n    thiz.bulk = bulk.concat(thiz.bulk);\n    // eslint-disable-next-line no-console\n    console.error(e);\n    debug('error occrrued', e);\n    this.stop();\n    this.checkEsConnection();\n  });\n};\n\nBulkWriter.prototype.append = function append(index, type, doc) {\n  this.bulk.push({\n    index: {\n      _index: index, _type: type, pipeline: this.pipeline\n    }\n  });\n  this.bulk.push(doc);\n};\n\nBulkWriter.prototype.checkEsConnection = function checkEsConnection() {\n  const thiz = this;\n  thiz.esConnection = false;\n\n  const operation = retry.operation({\n    forever: true,\n    retries: 1,\n    factor: 1,\n    minTimeout: 1 * 1000,\n    maxTimeout: 60 * 1000,\n    randomize: false\n  });\n  return new Promise((fulfill, reject) => {\n    operation.attempt((currentAttempt) => {\n      debug('checking for connection');\n      thiz.client.ping().then(\n        (res) => {\n          thiz.esConnection = true;\n          // Ensure mapping template is existing if desired\n          if (thiz.options.ensureMappingTemplate) {\n            thiz.ensureMappingTemplate(fulfill, reject);\n          } else {\n            fulfill(true);\n          }\n          debug('starting bulk writer');\n          thiz.running = true;\n          thiz.tick();\n        },\n        (err) => {\n          debug('checking for connection');\n          if (operation.retry(err)) {\n            return;\n          }\n          // thiz.esConnection = false;\n          reject(new Error('Cannot connect to ES'));\n        }\n      );\n    });\n  });\n};\n\nBulkWriter.prototype.ensureMappingTemplate = function ensureMappingTemplate(fulfill, reject) {\n  const thiz = this;\n  // eslint-disable-next-line prefer-destructuring\n  let mappingTemplate = thiz.options.mappingTemplate;\n  if (mappingTemplate === null || typeof mappingTemplate === 'undefined') {\n    const rawdata = fs.readFileSync(path.join(__dirname, 'index-template-mapping.json'));\n    mappingTemplate = JSON.parse(rawdata);\n  }\n  const tmplCheckMessage = {\n    name: 'template_' + thiz.options.indexPrefix\n  };\n  thiz.client.indices.getTemplate(tmplCheckMessage).then(\n    (res) => {\n      fulfill(res);\n    },\n    (res) => {\n      if (res.status && res.status === 404) {\n        const tmplMessage = {\n          name: 'template_' + thiz.options.indexPrefix,\n          create: true,\n          body: mappingTemplate\n        };\n        console.log('CREATE TEMPLATE------------------');\n        thiz.client.indices.putTemplate(tmplMessage).then(\n          (res1) => {\n            fulfill(res1);\n          },\n          (err1) => {\n            reject(err1);\n          }\n        );\n      }\n    }\n  );\n};\n\nmodule.exports = BulkWriter;\n"]},"metadata":{},"sourceType":"script"}