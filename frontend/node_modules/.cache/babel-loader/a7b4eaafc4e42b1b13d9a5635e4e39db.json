{"ast":null,"code":"/**\n * A client that makes requests to Elasticsearch via a {{#crossLink \"Transport\"}}Transport{{/crossLink}}\n *\n * Initializing a client might look something like:\n *\n * ```\n * var client = new es.Client({\n *   hosts: [\n *     'es1.net:9200',\n *     {\n *       host: 'es2.net',\n *       port: 9200\n *     }\n *   ],\n *   sniffOnStart: true,\n *   log: {\n *     type: 'file',\n *     level: 'warning'\n *   }\n * });\n * ```\n *\n * @class Client\n * @constructor\n */\nmodule.exports = Client;\n\nvar Transport = require('./transport');\n\nvar clientAction = require('./client_action');\n\nvar _ = require('lodash');\n\nvar utils = require('./utils');\n\nfunction Client(config) {\n  config = config || {};\n\n  if (config.__reused) {\n    throw new Error('Do not reuse objects to configure the elasticsearch Client class: ' + 'https://github.com/elasticsearch/elasticsearch-js/issues/33');\n  } else {\n    config.__reused = true;\n  }\n\n  function EsApiClient() {\n    // our client will log minimally by default\n    if (!config.hasOwnProperty('log')) {\n      config.log = 'warning';\n    }\n\n    if (!config.hosts && !config.host) {\n      config.host = 'http://localhost:9200';\n    }\n\n    this.close = function () {\n      this.transport.close();\n    };\n\n    this.transport = new Transport(config);\n\n    _.each(EsApiClient.prototype, _.bind(function (Fn, prop) {\n      if (Fn.prototype instanceof clientAction.ApiNamespace) {\n        this[prop] = new Fn(this.transport, this);\n      }\n    }, this));\n\n    delete this._namespaces;\n  }\n\n  EsApiClient.prototype = utils.funcEnum(config, 'apiVersion', Client.apis, '_default');\n\n  if (!config.sniffEndpoint && EsApiClient.prototype === Client.apis['0.90']) {\n    config.sniffEndpoint = '/_cluster/nodes';\n  }\n\n  var Constructor = EsApiClient;\n\n  if (config.plugins) {\n    Constructor.prototype = _.cloneDeep(Constructor.prototype);\n\n    _.each(config.plugins, function (setup) {\n      Constructor = setup(Constructor, config, {\n        apis: require('./apis'),\n        connectors: require('./connectors'),\n        loggers: require('./loggers'),\n        selectors: require('./selectors'),\n        serializers: require('./serializers'),\n        Client: require('./client'),\n        clientAction: clientAction,\n        Connection: require('./connection'),\n        ConnectionPool: require('./connection_pool'),\n        Errors: require('./errors'),\n        Host: require('./host'),\n        Log: require('./log'),\n        Logger: require('./logger'),\n        NodesToHost: require('./nodes_to_host'),\n        Transport: require('./transport')\n      }) || Constructor;\n    });\n  }\n\n  return new Constructor();\n}\n\nClient.apis = require('./apis');","map":{"version":3,"sources":["/Users/steinkorsveien/Development/SpringBotTest/RestTutorial/frontend/node_modules/elasticsearch/src/lib/client.js"],"names":["module","exports","Client","Transport","require","clientAction","_","utils","config","__reused","Error","EsApiClient","hasOwnProperty","log","hosts","host","close","transport","each","prototype","bind","Fn","prop","ApiNamespace","_namespaces","funcEnum","apis","sniffEndpoint","Constructor","plugins","cloneDeep","setup","connectors","loggers","selectors","serializers","Connection","ConnectionPool","Errors","Host","Log","Logger","NodesToHost"],"mappings":"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","sourcesContent":["/**\n * A client that makes requests to Elasticsearch via a {{#crossLink \"Transport\"}}Transport{{/crossLink}}\n *\n * Initializing a client might look something like:\n *\n * ```\n * var client = new es.Client({\n *   hosts: [\n *     'es1.net:9200',\n *     {\n *       host: 'es2.net',\n *       port: 9200\n *     }\n *   ],\n *   sniffOnStart: true,\n *   log: {\n *     type: 'file',\n *     level: 'warning'\n *   }\n * });\n * ```\n *\n * @class Client\n * @constructor\n */\n\nmodule.exports = Client;\n\nvar Transport = require('./transport');\nvar clientAction = require('./client_action');\nvar _ = require('lodash');\nvar utils = require('./utils');\n\nfunction Client(config) {\n  config = config || {};\n\n  if (config.__reused) {\n    throw new Error('Do not reuse objects to configure the elasticsearch Client class: ' +\n      'https://github.com/elasticsearch/elasticsearch-js/issues/33');\n  } else {\n    config.__reused = true;\n  }\n\n  function EsApiClient() {\n    // our client will log minimally by default\n    if (!config.hasOwnProperty('log')) {\n      config.log = 'warning';\n    }\n\n    if (!config.hosts && !config.host) {\n      config.host = 'http://localhost:9200';\n    }\n\n    this.close = function () {\n      this.transport.close();\n    };\n\n    this.transport = new Transport(config);\n\n    _.each(EsApiClient.prototype, _.bind(function (Fn, prop) {\n      if (Fn.prototype instanceof clientAction.ApiNamespace) {\n        this[prop] = new Fn(this.transport, this);\n      }\n    }, this));\n\n    delete this._namespaces;\n  }\n\n\n  EsApiClient.prototype = utils.funcEnum(config, 'apiVersion', Client.apis, '_default');\n  if (!config.sniffEndpoint && EsApiClient.prototype === Client.apis['0.90']) {\n    config.sniffEndpoint = '/_cluster/nodes';\n  }\n\n  var Constructor = EsApiClient;\n\n  if (config.plugins) {\n    Constructor.prototype = _.cloneDeep(Constructor.prototype);\n\n    _.each(config.plugins, function (setup) {\n      Constructor = setup(Constructor, config, {\n        apis: require('./apis'),\n        connectors: require('./connectors'),\n        loggers: require('./loggers'),\n        selectors: require('./selectors'),\n        serializers: require('./serializers'),\n        Client: require('./client'),\n        clientAction: clientAction,\n        Connection: require('./connection'),\n        ConnectionPool: require('./connection_pool'),\n        Errors: require('./errors'),\n        Host: require('./host'),\n        Log: require('./log'),\n        Logger: require('./logger'),\n        NodesToHost: require('./nodes_to_host'),\n        Transport: require('./transport')\n      }) || Constructor;\n    });\n  }\n\n  return new Constructor();\n}\n\nClient.apis = require('./apis');\n"]},"metadata":{},"sourceType":"script"}