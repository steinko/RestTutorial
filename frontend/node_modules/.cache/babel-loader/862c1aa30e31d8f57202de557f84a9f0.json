{"ast":null,"code":"'use strict';\n\nconst winston = require('winston');\n\nconst Transport = require('winston-transport');\n\nconst moment = require('moment');\n\nconst _ = require('lodash');\n\nconst elasticsearch = require('elasticsearch');\n\nconst _require = require('triple-beam'),\n      LEVEL = _require.LEVEL,\n      SPLAT = _require.SPLAT;\n\nconst defaultTransformer = require('./transformer');\n\nconst BulkWriter = require('./bulk_writer');\n\nmodule.exports = class Elasticsearch extends Transport {\n  constructor(opts) {\n    super(opts);\n    this.name = 'elasticsearch';\n    this.opts = opts || {};\n\n    if (!opts.timestamp) {\n      this.opts.timestamp = function timestamp() {\n        return new Date().toISOString();\n      };\n    } // Enforce context\n    // if (!(this instanceof Elasticsearch)) {\n    //   return new Elasticsearch(opts);\n    // }\n    // Set defaults\n\n\n    const defaults = {\n      level: 'info',\n      index: null,\n      indexPrefix: 'logs',\n      indexSuffixPattern: 'YYYY.MM.DD',\n      messageType: '_doc',\n      transformer: defaultTransformer,\n      ensureMappingTemplate: true,\n      flushInterval: 2000,\n      waitForActiveShards: 1,\n      handleExceptions: false,\n      pipeline: null\n    };\n\n    _.defaults(opts, defaults); // Use given client or create one\n\n\n    if (opts.client) {\n      this.client = opts.client;\n    } else {\n      const defaultClientOpts = {\n        clientOpts: {\n          log: [{\n            type: 'console',\n            level: 'error'\n          }]\n        }\n      };\n\n      _.defaults(opts, defaultClientOpts); // Create a new ES client\n      // http://localhost:9200 is the default of the client already\n\n\n      this.client = new elasticsearch.Client(this.opts.clientOpts);\n    }\n\n    const bulkWriteropts = {\n      interval: opts.flushInterval,\n      waitForActiveShards: opts.waitForActiveShards,\n      pipeline: opts.pipeline,\n      ensureMappingTemplate: opts.ensureMappingTemplate,\n      mappingTemplate: opts.mappingTemplate,\n      indexPrefix: opts.indexPrefix\n    };\n    this.bulkWriter = new BulkWriter(this.client, bulkWriteropts);\n    this.bulkWriter.start();\n  }\n\n  log(info, callback) {\n    const level = info[LEVEL];\n    const message = info.message;\n    let meta = info[SPLAT];\n\n    if (meta !== undefined) {\n      // eslint-disable-next-line prefer-destructuring\n      meta = meta[0];\n    }\n\n    setImmediate(() => {\n      this.emit('logged', level);\n    });\n    const logData = {\n      message,\n      level,\n      meta // timestamp: this.opts.timestamp()\n\n    };\n    const entry = this.opts.transformer(logData);\n    this.bulkWriter.append(this.getIndexName(this.opts), this.opts.messageType, entry);\n    callback();\n  }\n\n  query(options, callback) {\n    // const opts = this.normalizeQuery(options);\n    const index = this.getIndexName(this.opts);\n    const query = {\n      index // q\n\n    };\n    return this.client.search(query);\n  }\n\n  search(q) {\n    const index = this.getIndexName(this.opts);\n    const query = {\n      index,\n      q\n    };\n    return this.client.search(query);\n  }\n\n  getIndexName(opts) {\n    this.test = 'test';\n    let indexName = opts.index;\n\n    if (indexName === null) {\n      const now = moment();\n      const dateString = now.format(opts.indexSuffixPattern);\n      indexName = opts.indexPrefix + '-' + dateString;\n    }\n\n    return indexName;\n  }\n\n};\nwinston.transports.Elasticsearch = module.exports;","map":{"version":3,"sources":["/Users/steinkorsveien/Development/SpringBotTest/RestTutorial/frontend/node_modules/winston-elasticsearch/index.js"],"names":["winston","require","Transport","moment","_","elasticsearch","LEVEL","SPLAT","defaultTransformer","BulkWriter","module","exports","Elasticsearch","constructor","opts","name","timestamp","Date","toISOString","defaults","level","index","indexPrefix","indexSuffixPattern","messageType","transformer","ensureMappingTemplate","flushInterval","waitForActiveShards","handleExceptions","pipeline","client","defaultClientOpts","clientOpts","log","type","Client","bulkWriteropts","interval","mappingTemplate","bulkWriter","start","info","callback","message","meta","undefined","setImmediate","emit","logData","entry","append","getIndexName","query","options","search","q","test","indexName","now","dateString","format","transports"],"mappings":"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","sourcesContent":["'use strict';\n\nconst winston = require('winston');\nconst Transport = require('winston-transport');\nconst moment = require('moment');\nconst _ = require('lodash');\nconst elasticsearch = require('elasticsearch');\nconst { LEVEL, SPLAT } = require('triple-beam');\nconst defaultTransformer = require('./transformer');\nconst BulkWriter = require('./bulk_writer');\n\nmodule.exports = class Elasticsearch extends Transport {\n  constructor(opts) {\n    super(opts);\n    this.name = 'elasticsearch';\n\n    this.opts = opts || {};\n    if (!opts.timestamp) {\n      this.opts.timestamp = function timestamp() { return new Date().toISOString(); };\n    }\n    // Enforce context\n    // if (!(this instanceof Elasticsearch)) {\n    //   return new Elasticsearch(opts);\n    // }\n\n    // Set defaults\n    const defaults = {\n      level: 'info',\n      index: null,\n      indexPrefix: 'logs',\n      indexSuffixPattern: 'YYYY.MM.DD',\n      messageType: '_doc',\n      transformer: defaultTransformer,\n      ensureMappingTemplate: true,\n      flushInterval: 2000,\n      waitForActiveShards: 1,\n      handleExceptions: false,\n      pipeline: null\n    };\n    _.defaults(opts, defaults);\n\n    // Use given client or create one\n    if (opts.client) {\n      this.client = opts.client;\n    } else {\n      const defaultClientOpts = {\n        clientOpts: {\n          log: [\n            {\n              type: 'console',\n              level: 'error',\n            }\n          ]\n        }\n      };\n      _.defaults(opts, defaultClientOpts);\n\n      // Create a new ES client\n      // http://localhost:9200 is the default of the client already\n      this.client = new elasticsearch.Client(this.opts.clientOpts);\n    }\n\n    const bulkWriteropts = {\n      interval: opts.flushInterval,\n      waitForActiveShards: opts.waitForActiveShards,\n      pipeline: opts.pipeline,\n      ensureMappingTemplate: opts.ensureMappingTemplate,\n      mappingTemplate: opts.mappingTemplate,\n      indexPrefix: opts.indexPrefix\n    };\n\n    this.bulkWriter = new BulkWriter(\n      this.client,\n      bulkWriteropts\n    );\n    this.bulkWriter.start();\n  }\n\n  log(info, callback) {\n    const level = info[LEVEL];\n    const { message } = info;\n    let meta = info[SPLAT];\n    if (meta !== undefined) {\n      // eslint-disable-next-line prefer-destructuring\n      meta = meta[0];\n    }\n\n    setImmediate(() => {\n      this.emit('logged', level);\n    });\n\n    const logData = {\n      message,\n      level,\n      meta,\n      // timestamp: this.opts.timestamp()\n    };\n    const entry = this.opts.transformer(logData);\n    this.bulkWriter.append(\n      this.getIndexName(this.opts),\n      this.opts.messageType,\n      entry\n    );\n\n    callback();\n  }\n\n  query(options, callback) {\n    // const opts = this.normalizeQuery(options);\n    const index = this.getIndexName(this.opts);\n    const query = {\n      index,\n      // q\n    };\n    return this.client.search(query);\n  }\n\n  search(q) {\n    const index = this.getIndexName(this.opts);\n    const query = {\n      index,\n      q\n    };\n    return this.client.search(query);\n  }\n\n  getIndexName(opts) {\n    this.test = 'test';\n    let indexName = opts.index;\n    if (indexName === null) {\n      const now = moment();\n      const dateString = now.format(opts.indexSuffixPattern);\n      indexName = opts.indexPrefix + '-' + dateString;\n    }\n    return indexName;\n  }\n};\n\nwinston.transports.Elasticsearch = module.exports;\n"]},"metadata":{},"sourceType":"script"}