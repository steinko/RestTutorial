{"ast":null,"code":"/* eslint no-unused-vars: 0 */\n'use strict';\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar _require = require('triple-beam'),\n    configs = _require.configs,\n    LEVEL = _require.LEVEL,\n    MESSAGE = _require.MESSAGE;\n\nvar Padder =\n/*#__PURE__*/\nfunction () {\n  function Padder() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      levels: configs.npm.levels\n    };\n\n    _classCallCheck(this, Padder);\n\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n\n\n  _createClass(Padder, [{\n    key: \"transform\",\n\n    /**\n     * Prepends the padding onto the `message` based on the `LEVEL` of\n     * the `info`. This is based on the behavior of `winston@2` which also\n     * prepended the level onto the message.\n     *\n     * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n     *\n     * @param  {Info} info Logform info object\n     * @param  {Object} opts Options passed along to this instance.\n     * @returns {Info} Modified logform info object.\n     */\n    value: function transform(info, opts) {\n      info.message = \"\".concat(this.paddings[info[LEVEL]]).concat(info.message);\n\n      if (info[MESSAGE]) {\n        info[MESSAGE] = \"\".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);\n      }\n\n      return info;\n    }\n  }], [{\n    key: \"getLongestLevel\",\n    value: function getLongestLevel(levels) {\n      var lvls = Object.keys(levels).map(function (level) {\n        return level.length;\n      });\n      return Math.max.apply(Math, _toConsumableArray(lvls));\n    }\n    /**\n     * Returns the padding for the specified `level` assuming that the\n     * maximum length of all levels it's associated with is `maxLength`.\n     * @param  {String} level Level to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @param  {Number} maxLength Length of the longest level\n     * @returns {String} Padding string for the `level`\n     */\n\n  }, {\n    key: \"paddingForLevel\",\n    value: function paddingForLevel(level, filler, maxLength) {\n      var targetLen = maxLength + 1 - level.length;\n      var rep = Math.floor(targetLen / filler.length);\n      var padding = \"\".concat(filler).concat(filler.repeat(rep));\n      return padding.slice(0, targetLen);\n    }\n    /**\n     * Returns an object with the string paddings for the given `levels`\n     * using the specified `filler`.\n     * @param  {Object} levels Set of all levels to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @returns {Object} Mapping of level to desired padding.\n     */\n\n  }, {\n    key: \"paddingForLevels\",\n    value: function paddingForLevels(levels) {\n      var filler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      var maxLength = Padder.getLongestLevel(levels);\n      return Object.keys(levels).reduce(function (acc, level) {\n        acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n        return acc;\n      }, {});\n    }\n  }]);\n\n  return Padder;\n}();\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Padder(opts);\n};\n\nmodule.exports.Padder = module.exports.Format = Padder;","map":{"version":3,"sources":["/Users/steinkorsveien/Development/SpringBotTest/RestTutorial/frontend/node_modules/logform/dist/pad-levels.js"],"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","_classCallCheck","instance","Constructor","_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","key","_createClass","protoProps","staticProps","_require","require","configs","LEVEL","MESSAGE","Padder","opts","arguments","undefined","levels","npm","paddings","paddingForLevels","filler","options","value","transform","info","message","concat","getLongestLevel","lvls","keys","map","level","Math","max","apply","paddingForLevel","maxLength","targetLen","rep","floor","padding","repeat","slice","reduce","acc","module","exports","Format"],"mappings":"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","sourcesContent":["/* eslint no-unused-vars: 0 */\n'use strict';\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('triple-beam'),\n    configs = _require.configs,\n    LEVEL = _require.LEVEL,\n    MESSAGE = _require.MESSAGE;\n\nvar Padder =\n/*#__PURE__*/\nfunction () {\n  function Padder() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      levels: configs.npm.levels\n    };\n\n    _classCallCheck(this, Padder);\n\n    this.paddings = Padder.paddingForLevels(opts.levels, opts.filler);\n    this.options = opts;\n  }\n  /**\n   * Returns the maximum length of keys in the specified `levels` Object.\n   * @param  {Object} levels Set of all levels to calculate longest level against.\n   * @returns {Number} Maximum length of the longest level string.\n   */\n\n\n  _createClass(Padder, [{\n    key: \"transform\",\n\n    /**\n     * Prepends the padding onto the `message` based on the `LEVEL` of\n     * the `info`. This is based on the behavior of `winston@2` which also\n     * prepended the level onto the message.\n     *\n     * See: https://github.com/winstonjs/winston/blob/2.x/lib/winston/logger.js#L198-L201\n     *\n     * @param  {Info} info Logform info object\n     * @param  {Object} opts Options passed along to this instance.\n     * @returns {Info} Modified logform info object.\n     */\n    value: function transform(info, opts) {\n      info.message = \"\".concat(this.paddings[info[LEVEL]]).concat(info.message);\n\n      if (info[MESSAGE]) {\n        info[MESSAGE] = \"\".concat(this.paddings[info[LEVEL]]).concat(info[MESSAGE]);\n      }\n\n      return info;\n    }\n  }], [{\n    key: \"getLongestLevel\",\n    value: function getLongestLevel(levels) {\n      var lvls = Object.keys(levels).map(function (level) {\n        return level.length;\n      });\n      return Math.max.apply(Math, _toConsumableArray(lvls));\n    }\n    /**\n     * Returns the padding for the specified `level` assuming that the\n     * maximum length of all levels it's associated with is `maxLength`.\n     * @param  {String} level Level to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @param  {Number} maxLength Length of the longest level\n     * @returns {String} Padding string for the `level`\n     */\n\n  }, {\n    key: \"paddingForLevel\",\n    value: function paddingForLevel(level, filler, maxLength) {\n      var targetLen = maxLength + 1 - level.length;\n      var rep = Math.floor(targetLen / filler.length);\n      var padding = \"\".concat(filler).concat(filler.repeat(rep));\n      return padding.slice(0, targetLen);\n    }\n    /**\n     * Returns an object with the string paddings for the given `levels`\n     * using the specified `filler`.\n     * @param  {Object} levels Set of all levels to calculate padding for.\n     * @param  {String} filler Repeatable text to use for padding.\n     * @returns {Object} Mapping of level to desired padding.\n     */\n\n  }, {\n    key: \"paddingForLevels\",\n    value: function paddingForLevels(levels) {\n      var filler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n      var maxLength = Padder.getLongestLevel(levels);\n      return Object.keys(levels).reduce(function (acc, level) {\n        acc[level] = Padder.paddingForLevel(level, filler, maxLength);\n        return acc;\n      }, {});\n    }\n  }]);\n\n  return Padder;\n}();\n/*\n * function padLevels (info)\n * Returns a new instance of the padLevels Format which pads\n * levels to be the same length. This was previously exposed as\n * { padLevels: true } to transports in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Padder(opts);\n};\n\nmodule.exports.Padder = module.exports.Format = Padder;"]},"metadata":{},"sourceType":"script"}