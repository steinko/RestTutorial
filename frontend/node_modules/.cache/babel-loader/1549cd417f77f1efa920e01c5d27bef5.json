{"ast":null,"code":"/**\n * Generic Transport for the browser, using the XmlHttpRequest object\n *\n * @class  connections.Xhr\n */\nmodule.exports = XhrConnector;\n/* jshint browser:true */\n\nvar utils = require('../utils');\n\nvar ConnectionAbstract = require('../connection');\n\nvar ConnectionFault = require('../errors').ConnectionFault;\n\nvar asyncDefault = !(navigator && /PhantomJS/i.test(navigator.userAgent));\n\nfunction XhrConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n}\n\nutils.inherits(XhrConnector, ConnectionAbstract);\n/**\n * Simply returns an XHR object cross browser\n * @type {Function}\n */\n\nvar getXhr = _.noop;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  // rewrite the getXhr method to always return the native implementation\n  getXhr = function () {\n    return new XMLHttpRequest();\n  };\n} else {\n  // find the first MS implementation available\n  getXhr = _(['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0']).map(function (appName) {\n    /* jshint unused: false */\n    try {\n      var test = new window.ActiveXObject(appName); // eslint-disable-line no-unused-vars\n\n      return function () {\n        return new window.ActiveXObject(appName);\n      };\n    } catch (e) {\n      return false;\n    }\n  }).compact().head();\n}\n\nif (!getXhr) {\n  throw new Error('getXhr(): XMLHttpRequest not available');\n}\n\nXhrConnector.prototype.request = function (params, cb) {\n  var xhr = getXhr();\n  var timeoutId;\n  var host = this.host;\n  var log = this.log;\n  var url = host.makeUrl(params);\n  var headers = host.getHeaders(params.headers);\n  var async = params.async === false ? false : asyncDefault;\n  xhr.open(params.method || 'GET', url, async);\n\n  if (headers) {\n    for (var key in headers) {\n      if (headers[key] !== void 0) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      clearTimeout(timeoutId);\n      log.trace(params.method, url, params.body, xhr.responseText, xhr.status);\n      var err = xhr.status ? void 0 : new ConnectionFault(xhr.statusText || 'Request failed to complete.');\n      cb(err, xhr.responseText, xhr.status);\n    }\n  };\n\n  xhr.send(params.body || void 0);\n  return function () {\n    xhr.abort();\n  };\n};","map":{"version":3,"sources":["/Users/steinkorsveien/Development/SpringBotTest/RestTutorial/frontend/node_modules/elasticsearch/src/lib/connectors/xhr.js"],"names":["module","exports","XhrConnector","utils","require","ConnectionAbstract","ConnectionFault","asyncDefault","navigator","test","userAgent","host","config","call","inherits","getXhr","_","noop","XMLHttpRequest","map","appName","window","ActiveXObject","e","compact","head","Error","prototype","request","params","cb","xhr","timeoutId","log","url","makeUrl","headers","getHeaders","async","open","method","key","setRequestHeader","onreadystatechange","readyState","clearTimeout","trace","body","responseText","status","err","statusText","send","abort"],"mappings":"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","sourcesContent":["/**\n * Generic Transport for the browser, using the XmlHttpRequest object\n *\n * @class  connections.Xhr\n */\nmodule.exports = XhrConnector;\n\n/* jshint browser:true */\n\nvar utils = require('../utils');\nvar ConnectionAbstract = require('../connection');\nvar ConnectionFault = require('../errors').ConnectionFault;\nvar asyncDefault = !(navigator && /PhantomJS/i.test(navigator.userAgent));\n\nfunction XhrConnector(host, config) {\n  ConnectionAbstract.call(this, host, config);\n}\nutils.inherits(XhrConnector, ConnectionAbstract);\n\n/**\n * Simply returns an XHR object cross browser\n * @type {Function}\n */\nvar getXhr = _.noop;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  // rewrite the getXhr method to always return the native implementation\n  getXhr = function () {\n    return new XMLHttpRequest();\n  };\n} else {\n  // find the first MS implementation available\n  getXhr = _(['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'])\n  .map(function (appName) {\n    /* jshint unused: false */\n    try {\n      var test = new window.ActiveXObject(appName); // eslint-disable-line no-unused-vars\n      return function () {\n        return new window.ActiveXObject(appName);\n      };\n    } catch (e) {\n      return false;\n    }\n  })\n  .compact()\n  .head();\n}\n\nif (!getXhr) {\n  throw new Error('getXhr(): XMLHttpRequest not available');\n}\n\nXhrConnector.prototype.request = function (params, cb) {\n  var xhr = getXhr();\n  var timeoutId;\n  var host = this.host;\n  var log = this.log;\n\n  var url = host.makeUrl(params);\n  var headers = host.getHeaders(params.headers);\n  var async = params.async === false ? false : asyncDefault;\n\n  xhr.open(params.method || 'GET', url, async);\n\n  if (headers) {\n    for (var key in headers) {\n      if (headers[key] !== void 0) {\n        xhr.setRequestHeader(key, headers[key]);\n      }\n    }\n  }\n\n  xhr.onreadystatechange = function () {\n    if (xhr.readyState === 4) {\n      clearTimeout(timeoutId);\n      log.trace(params.method, url, params.body, xhr.responseText, xhr.status);\n      var err = xhr.status ? void 0 : new ConnectionFault(xhr.statusText || 'Request failed to complete.');\n      cb(err, xhr.responseText, xhr.status);\n    }\n  };\n\n  xhr.send(params.body || void 0);\n\n  return function () {\n    xhr.abort();\n  };\n};\n"]},"metadata":{},"sourceType":"script"}